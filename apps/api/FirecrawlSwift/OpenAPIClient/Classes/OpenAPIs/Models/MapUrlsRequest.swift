//
// MapUrlsRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct MapUrlsRequest: Codable, JSONEncodable, Hashable {

    public static let limitRule = NumericRule<Int>(minimum: nil, exclusiveMinimum: false, maximum: 5000, exclusiveMaximum: false, multipleOf: nil)
    /** The base URL to start crawling from */
    public var url: String
    /** Search query to use for mapping. During the Alpha phase, the 'smart' part of the search functionality is limited to 100 search results. However, if map finds more results, there is no limit applied. */
    public var search: String?
    /** Ignore the website sitemap when crawling */
    public var ignoreSitemap: Bool? = true
    /** Include subdomains of the website */
    public var includeSubdomains: Bool? = false
    /** Maximum number of links to return */
    public var limit: Int? = 5000

    public init(url: String, search: String? = nil, ignoreSitemap: Bool? = true, includeSubdomains: Bool? = false, limit: Int? = 5000) {
        self.url = url
        self.search = search
        self.ignoreSitemap = ignoreSitemap
        self.includeSubdomains = includeSubdomains
        self.limit = limit
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case url
        case search
        case ignoreSitemap
        case includeSubdomains
        case limit
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(url, forKey: .url)
        try container.encodeIfPresent(search, forKey: .search)
        try container.encodeIfPresent(ignoreSitemap, forKey: .ignoreSitemap)
        try container.encodeIfPresent(includeSubdomains, forKey: .includeSubdomains)
        try container.encodeIfPresent(limit, forKey: .limit)
    }
}

