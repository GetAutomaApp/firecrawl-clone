//
// ScrapingAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class ScrapingAPI {

    /**
     Scrape a single URL and optionally extract information using an LLM
     
     - parameter scrapeAndExtractFromUrlRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func scrapeAndExtractFromUrl(scrapeAndExtractFromUrlRequest: ScrapeAndExtractFromUrlRequest, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ScrapeResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return scrapeAndExtractFromUrlWithRequestBuilder(scrapeAndExtractFromUrlRequest: scrapeAndExtractFromUrlRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Scrape a single URL and optionally extract information using an LLM
     - POST /scrape
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter scrapeAndExtractFromUrlRequest: (body)  
     - returns: RequestBuilder<ScrapeResponse> 
     */
    open class func scrapeAndExtractFromUrlWithRequestBuilder(scrapeAndExtractFromUrlRequest: ScrapeAndExtractFromUrlRequest) -> RequestBuilder<ScrapeResponse> {
        let localVariablePath = "/scrape"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: scrapeAndExtractFromUrlRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ScrapeResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
