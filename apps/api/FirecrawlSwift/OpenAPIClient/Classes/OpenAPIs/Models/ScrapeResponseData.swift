//
// ScrapeResponseData.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct ScrapeResponseData: Codable, JSONEncodable, Hashable {

    public var markdown: String?
    /** HTML version of the content on page if `html` is in `formats` */
    public var html: String?
    /** Raw HTML content of the page if `rawHtml` is in `formats` */
    public var rawHtml: String?
    /** Screenshot of the page if `screenshot` is in `formats` */
    public var screenshot: String?
    /** List of links on the page if `links` is in `formats` */
    public var links: [String]?
    public var metadata: ScrapeResponseDataMetadata?
    /** Displayed when using LLM Extraction. Extracted data from the page following the schema defined. */
    public var llmExtraction: AnyCodable?
    /** Can be displayed when using LLM Extraction. Warning message will let you know any issues with the extraction. */
    public var warning: String?

    public init(markdown: String? = nil, html: String? = nil, rawHtml: String? = nil, screenshot: String? = nil, links: [String]? = nil, metadata: ScrapeResponseDataMetadata? = nil, llmExtraction: AnyCodable? = nil, warning: String? = nil) {
        self.markdown = markdown
        self.html = html
        self.rawHtml = rawHtml
        self.screenshot = screenshot
        self.links = links
        self.metadata = metadata
        self.llmExtraction = llmExtraction
        self.warning = warning
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case markdown
        case html
        case rawHtml
        case screenshot
        case links
        case metadata
        case llmExtraction = "llm_extraction"
        case warning
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(markdown, forKey: .markdown)
        try container.encodeIfPresent(html, forKey: .html)
        try container.encodeIfPresent(rawHtml, forKey: .rawHtml)
        try container.encodeIfPresent(screenshot, forKey: .screenshot)
        try container.encodeIfPresent(links, forKey: .links)
        try container.encodeIfPresent(metadata, forKey: .metadata)
        try container.encodeIfPresent(llmExtraction, forKey: .llmExtraction)
        try container.encodeIfPresent(warning, forKey: .warning)
    }
}

