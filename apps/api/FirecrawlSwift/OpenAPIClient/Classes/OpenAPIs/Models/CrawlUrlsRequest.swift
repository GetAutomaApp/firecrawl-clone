//
// CrawlUrlsRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct CrawlUrlsRequest: Codable, JSONEncodable, Hashable {

    /** The base URL to start crawling from */
    public var url: String
    /** URL patterns to exclude */
    public var excludePaths: [String]?
    /** URL patterns to include */
    public var includePaths: [String]?
    /** Maximum depth to crawl relative to the entered URL. */
    public var maxDepth: Int? = 2
    /** Ignore the website sitemap when crawling */
    public var ignoreSitemap: Bool? = true
    /** Maximum number of pages to crawl */
    public var limit: Int? = 10
    /** Enables the crawler to navigate from a specific URL to previously linked pages. */
    public var allowBackwardLinks: Bool? = false
    /** Allows the crawler to follow links to external websites. */
    public var allowExternalLinks: Bool? = false
    /** The URL to send the webhook to. This will trigger for every page crawled and return the specified formats along with the metadata. */
    public var webhookUrl: String?
    /** Metadata to send with the webhook */
    public var webhookMetadata: AnyCodable?
    public var scrapeOptions: CrawlUrlsRequestScrapeOptions?

    public init(url: String, excludePaths: [String]? = nil, includePaths: [String]? = nil, maxDepth: Int? = 2, ignoreSitemap: Bool? = true, limit: Int? = 10, allowBackwardLinks: Bool? = false, allowExternalLinks: Bool? = false, webhookUrl: String? = nil, webhookMetadata: AnyCodable? = nil, scrapeOptions: CrawlUrlsRequestScrapeOptions? = nil) {
        self.url = url
        self.excludePaths = excludePaths
        self.includePaths = includePaths
        self.maxDepth = maxDepth
        self.ignoreSitemap = ignoreSitemap
        self.limit = limit
        self.allowBackwardLinks = allowBackwardLinks
        self.allowExternalLinks = allowExternalLinks
        self.webhookUrl = webhookUrl
        self.webhookMetadata = webhookMetadata
        self.scrapeOptions = scrapeOptions
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case url
        case excludePaths
        case includePaths
        case maxDepth
        case ignoreSitemap
        case limit
        case allowBackwardLinks
        case allowExternalLinks
        case webhookUrl
        case webhookMetadata
        case scrapeOptions
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(url, forKey: .url)
        try container.encodeIfPresent(excludePaths, forKey: .excludePaths)
        try container.encodeIfPresent(includePaths, forKey: .includePaths)
        try container.encodeIfPresent(maxDepth, forKey: .maxDepth)
        try container.encodeIfPresent(ignoreSitemap, forKey: .ignoreSitemap)
        try container.encodeIfPresent(limit, forKey: .limit)
        try container.encodeIfPresent(allowBackwardLinks, forKey: .allowBackwardLinks)
        try container.encodeIfPresent(allowExternalLinks, forKey: .allowExternalLinks)
        try container.encodeIfPresent(webhookUrl, forKey: .webhookUrl)
        try container.encodeIfPresent(webhookMetadata, forKey: .webhookMetadata)
        try container.encodeIfPresent(scrapeOptions, forKey: .scrapeOptions)
    }
}

