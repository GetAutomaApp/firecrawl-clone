//
// CrawlStatusResponseObj.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct CrawlStatusResponseObj: Codable, JSONEncodable, Hashable {

    /** The current status of the crawl. Can be `scraping`, `completed`, or `failed`. */
    public var status: String?
    /** The total number of pages that were attempted to be crawled. */
    public var total: Int?
    /** The number of pages that have been successfully crawled. */
    public var completed: Int?
    /** The date and time when the crawl will expire. */
    public var expiresAt: Date?
    /** The URL to retrieve the next 10MB of data. Returned if the crawl is not completed or if the response is larger than 10MB. */
    public var next: String?
    /** The data of the crawl. */
    public var data: [CrawlStatusResponseObjDataInner]?

    public init(status: String? = nil, total: Int? = nil, completed: Int? = nil, expiresAt: Date? = nil, next: String? = nil, data: [CrawlStatusResponseObjDataInner]? = nil) {
        self.status = status
        self.total = total
        self.completed = completed
        self.expiresAt = expiresAt
        self.next = next
        self.data = data
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case status
        case total
        case completed
        case expiresAt
        case next
        case data
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(status, forKey: .status)
        try container.encodeIfPresent(total, forKey: .total)
        try container.encodeIfPresent(completed, forKey: .completed)
        try container.encodeIfPresent(expiresAt, forKey: .expiresAt)
        try container.encodeIfPresent(next, forKey: .next)
        try container.encodeIfPresent(data, forKey: .data)
    }
}

