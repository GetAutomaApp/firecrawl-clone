//
// CrawlUrlsRequestScrapeOptions.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct CrawlUrlsRequestScrapeOptions: Codable, JSONEncodable, Hashable {

    public enum Formats: String, Codable, CaseIterable {
        case markdown = "markdown"
        case rawhtml = "rawHtml"
        case screenshot = "screenshot"
    }
    /** Formats to include in the output. */
    public var formats: [Formats]?
    /** Headers to send with the request. Can be used to send cookies, user-agent, etc. */
    public var headers: AnyCodable?
    /** Tags to include in the output. */
    public var includeTags: [String]?
    /** Tags to exclude from the output. */
    public var excludeTags: [String]?
    /** Wait x amount of milliseconds for the page to load to fetch content */
    public var waitFor: Int? = 123

    public init(formats: [Formats]? = nil, headers: AnyCodable? = nil, includeTags: [String]? = nil, excludeTags: [String]? = nil, waitFor: Int? = 123) {
        self.formats = formats
        self.headers = headers
        self.includeTags = includeTags
        self.excludeTags = excludeTags
        self.waitFor = waitFor
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case formats
        case headers
        case includeTags
        case excludeTags
        case waitFor
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(formats, forKey: .formats)
        try container.encodeIfPresent(headers, forKey: .headers)
        try container.encodeIfPresent(includeTags, forKey: .includeTags)
        try container.encodeIfPresent(excludeTags, forKey: .excludeTags)
        try container.encodeIfPresent(waitFor, forKey: .waitFor)
    }
}

