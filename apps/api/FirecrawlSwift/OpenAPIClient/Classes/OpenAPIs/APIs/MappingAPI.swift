//
// MappingAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class MappingAPI {

    /**
     Map multiple URLs based on options
     
     - parameter mapUrlsRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func mapUrls(mapUrlsRequest: MapUrlsRequest, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: MapResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return mapUrlsWithRequestBuilder(mapUrlsRequest: mapUrlsRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Map multiple URLs based on options
     - POST /map
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter mapUrlsRequest: (body)  
     - returns: RequestBuilder<MapResponse> 
     */
    open class func mapUrlsWithRequestBuilder(mapUrlsRequest: MapUrlsRequest) -> RequestBuilder<MapResponse> {
        let localVariablePath = "/map"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: mapUrlsRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MapResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
